AWSTemplateFormatVersion: 2010-09-09
Description: EC2 RDS ALB S3 create

############################################
#         Metadata & Parameter
############################################
Metadata: #入力パラメータのグループ化と順序の指定
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Can be created as a separate resource by renaming the environment
        Parameters:
          - EnvironmentName

      -
        Label:
          default: String for cross-stacking. Same as stack name
        Parameters:
          - VpcStackName
          - SgStackName

      -
        Label:
          default: Configuration for EC2
        Parameters:
          - InstanceTypeSelect

      -
        Label:
          default: Configure key pairs for use with EC2
        Parameters:
          - KeyFormatSelect
          - KeyNameSelect
          - KeyTypeSelect

      -
        Label:
          default: Configuration for RDS
        Parameters:
          - DataBaseName
          - DBEngineSelect
          - EngineVersionSelect
          - DBStorageSize
          - DBStorageType
          - DBAZ
          - DBUser
          - DBPassword

      -
        Label:
          default: Configuration for S3
        Parameters:
          - S3Name
          - VersioningConfig
          - EC2PolicyName

Parameters:
  #環境名(変更することで別の環境にすることができる)
  EnvironmentName:
    Type: String
    Default: CFn-raisetech
    Description:  Write Environment Name

  #クロススタック機能用にネットワークレイヤーの読み込み
  VpcStackName:
    Type: String
    Default: CFn-VPC
    Description:  Load VPC names for cross-stack

  #クロススタック機能用にセキュリティグループの読み込み
  SgStackName:
    Type: String
    Default: CFn-SecurityGroup
    Description:  Load Security Group for cross-stack

  #使用するインスタンスタイプ
  InstanceTypeSelect:
    Type: String
    Default: t2.micro #デフォルトは無料枠のt2.micro
    AllowedValues:  #他のインスタンスタイプも選択肢にでるよう記述
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
    Description:  Select Instance Type

  #作成する暗号化鍵のフォーマット
  KeyFormatSelect:
    Type: String
    Default: ppk #デフォルトはppk
    AllowedValues:  #他のフォーマットも選択肢にでるよう記述
      - ppk
      - pem
    Description:  Select Key Format

  #作成する暗号化鍵の名前
  KeyNameSelect:
    Type: String
    Default: CFn-Raisetech-EC2
    Description:  Write Create Key Name

  #作成する暗号化鍵の暗号化の種類
  KeyTypeSelect:
    Type: String
    Default: rsa #デフォルトはrsa
    AllowedValues:  #他の種類も選択肢にでるよう記述
      - rsa
      - ed25519
    Description:  Select Key Material. that ED25519 keys are not supported for Windows instances.

  #データベースインスタンスをデプロイ時に作成するデータベース名
  DataBaseName:
    Type: String
    Default: test
    Description:  Weite DataBase Name. Not Use -

  #データベースのエンジン
  DBEngineSelect:
    Type: String
    Default: MySQL
    Description:  Specify the engine to be used in the database

  #データベースのエンジンバージョン
  EngineVersionSelect:
    Type: String
    Default: 8.0.35
    Description:  Specify the engine version of the database

  #データベースの初期容量
  DBStorageSize:
    Type: String
    Default: 20
    Description:  database Storage Size

  #データベースのストレージタイプ
  DBStorageType:
    Type: String
    Default: gp2
    Description:  Select DB Storage Type

  #データベースをデプロイするAZを指定
  DBAZ:
    Type: String
    Default: 0
    Description:  Specify database storage type

  #データベースのログインユーザー
  DBUser:
    NoEcho: true
    Type: String
    Description:  Write Logged-in users of the database

  #データベースのログインパスワード
  DBPassword:
    NoEcho: true
    Type: String
    Description:  Write Logged-in password of the database

  #S3バケット名
  S3Name:
    Type: String
    Default: cfn-raisetech
    Description:  Write S3 bucket name

  #S3バケットのバージョニング設定
  VersioningConfig:
    Type: String
    Default: Suspended #デフォルトは無効のSuspended
    AllowedValues:
      - Enabled
      - Suspended
    Description:  Select S3 versioning Config

  #EC2のS3操作用のポリシー名
  EC2PolicyName:
    Type: String
    Default:  ec2policy
    Description:  Write EC2 Policy Name

############################################
#         Policy & Role
############################################
Resources:
  EC2Policy:  #インスタンスからS3にアクセスする用ののポリシー作成
    Type: AWS::IAM::ManagedPolicy #ただのPolicyだとインラインポリシーになるので、カスタマー管理ポリシーとして作成
    Properties:
      ManagedPolicyName: !Ref EC2PolicyName #リージョンで一意のポリシー名
      PolicyDocument:
        Version:  2012-10-17
        Statement:
          - Effect: Allow
            Action: #S3への基本的な動作を許可
              - s3:PutObject
              - s3:GetObject
              - s3:ListAllMyBuckets
              - s3:ListBucket
              - s3:DeleteObject
            Resource: "*"

  EC2AttachRole:  #上記のポリシーをアタッチしたロールの作成
    Type: AWS::IAM::Role
    DependsOn:  EC2Policy
    Properties:
      RoleName: !Sub ${EC2PolicyName}attach
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:  #サービスにEC2を指定
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:  #作成したポリシーをアタッチ
        - !Sub  arn:aws:iam::${AWS::AccountId}:policy/${EC2PolicyName}

  ############################################
  #         SSH Key Pair
  ############################################
  NewKeyPair:
    Type: AWS::EC2::KeyPair #EC2でのSSH接続用に暗号化鍵を作成、作成された鍵はSystems Manager Parameter Storeに格納
    Properties:
      KeyFormat: !Ref KeyFormatSelect #キーフォーマットをppkかpemで選択
      KeyName: !Ref KeyNameSelect  #暗号化鍵の名前
      KeyType: !Ref KeyTypeSelect #暗号化鍵の暗号方式
      Tags:
        - Key: Name
          Value:  !Sub ${EnvironmentName}-EC2-Key

  ############################################
  #         EC2 Instance
  ############################################
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile #IAMロールを格納するコンテナであり、そのコンテナをEC2にアタッチする
    Properties:
      Path: /
      Roles:
        - !Ref EC2AttachRole  #アタッチするロールを選択

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:  ami-0705806411562a051 #マシンイメージにAmazon Linux 2 Kernel 5.10 AMIを選択
      InstanceType: !Ref InstanceTypeSelect  #インスタンスタイプを選択してデプロイする
      IamInstanceProfile: !Ref InstanceProfile  #コンテナを指定して、Roleをアタッチする
      KeyName:  !Ref NewKeyPair  #インスタンスに適用するキーペアの選択。今回はインスタンス作成時に同時に作成する。
      BlockDeviceMappings:  #ストレージの設定
        - DeviceName: /dev/xvda
          Ebs:  #アタッチするEBSの設定
            VolumeType: gp2 #ボリュームタイプ
            VolumeSize: 20 #ディスク容量
            DeleteOnTermination:  True  #インスタンス終了時に削除するか
      NetworkInterfaces:
        - Description:  CFn-EC2 NetworkInterface
          AssociatePublicIpAddress: true  #起動時にパブリックIPアドレスの自動割り当てをONにする
          DeviceIndex:  0 #ネットワークインターフェースの指定。通常は0でeth0に該当する。起動時のパブリックIPはeth0に該当するENIに割り当てられる。
          #インスタンス起動時にDeviceIndexを指定するとENIを作成してくれる。
          SubnetId:
            Fn::ImportValue: #ImportValueでエクスポートしたVPCを参照（ImportValueは!Subを併用する場合、短縮形は使用できない）
              !Sub ${VpcStackName}-PublicSubnet1  #サブネットの指定
          GroupSet:
            - Fn::ImportValue: #ImportValueでエクスポートしたSecurityGroupを参照（ImportValueは!Subを併用する場合、短縮形は使用できない）
                !Sub ${SgStackName}-EC2Sg  #SGの指定。#インスタンス起動時にネットワークインターフェースを作成する際に必要。
      Tags:
        - Key: Name
          Value:  !Sub ${EnvironmentName}-EC2

  ############################################
  #         RDS Instance
  ############################################
  RDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete  #スタックを削除する際のリソースの対処。今回はスタック削除時にリソースも削除する。
    Properties:
      DBName: !Ref DataBaseName #データベースインスタンスをデプロイ時に作成するデータベース名
      DBInstanceClass:  db.t3.micro #DBのスペック
      Engine:  !Ref DBEngineSelect  #DBのエンジン設定、今回はMySQL
      EngineVersion: !Ref EngineVersionSelect #MySQLのバージョン指定
      MasterUsername:  !Ref DBUser #DBのログインユーザー設定
      MasterUserPassword:  !Ref DBPassword #DBのログインパスワード設定
      AllocatedStorage: !Ref DBStorageSize  #DBの容量
      StorageType:  !Ref DBStorageType  #DBストレージのタイプ
      AutoMinorVersionUpgrade: false  #エンジンのマイナーアップデートを自動で適用するか否かの設定
      DBSubnetGroupName:  #RDSをデプロイする際のサブネットグループの指定
        Fn::ImportValue: #ImportValueでエクスポートしたSubnetgroupを参照（ImportValueは!Subを併用する場合、短縮形は使用できない）
          !Sub ${SgStackName}-SubnetGroupName
      VPCSecurityGroups: #セキュリティグループを設定
        - Fn::ImportValue: #ImportValueでエクスポートしたSecurityGroupを参照（ImportValueは!Subを併用する場合、短縮形は使用できない）
            !Sub ${SgStackName}-RDSSg  #SGの指定。
      MultiAZ:  false #マルチアベイラビリティゾーンの指定、falseでシングルAZ
      AvailabilityZone: !Select #デプロイ先リージョンのすべての AZ をリストして、 指定した番目のAZ にRDSを作成
        - !Ref DBAZ
        - Fn::GetAZs: !Ref AWS::Region
      StorageEncrypted: true  #DBリソースの暗号化
      Tags:
        - Key: Name
          Value:  !Sub ${EnvironmentName}-RDS

  ############################################
  #         ALB & TargetGroup & Listner
  ############################################
  ALBTargetGroup: #ターゲットグループの作成
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId:  ##ImportValueでエクスポートしたVPCを参照
        Fn::ImportValue:
          !Sub ${VpcStackName}-VPC
      Name: !Sub ${EnvironmentName}-TargetGroup #ターゲットグループ名
      Protocol:  HTTP #ターゲットへのトラフィックのルーティングに使用するプロトコルを指定
      Port:   #ターゲットが通信を受信するポートを指定
        Fn::ImportValue: #ImportValueでエクスポートしたSecurityGroupを参照（ImportValueは!Subを併用する場合、短縮形は使用できない）
          !Sub ${SgStackName}-WebPort  #SecurityGroup.ymlで指定したHTTP用のポート番号を読み込み
      HealthCheckProtocol:  HTTP  #ALBがターゲットへのヘルスチェック時に使用するプロトコルの指定
      HealthCheckPath: /  #ヘルスチェックに使用するURLパス
      HealthCheckPort:  traffic-port  #ターゲットのヘルスチェック時に使用するポート番号、traffic-portなので80にあたる
      HealthCheckTimeoutSeconds:  10  #この時間、ターゲットから応答がないとヘルスチェックに失敗したことを意味する
      HealthyThresholdCount:  2 #ターゲットのヘルスがOKだと判断するのに必要な連続したヘルスチェックの成功回数、ドキュメントの推奨値
      UnhealthyThresholdCount:  2  #ターゲットのヘルスがNGだと判断するのに必要な連続したヘルスチェックの失敗回数
      HealthCheckIntervalSeconds: 30  #ヘルスチェックの実行間隔の時間、ドキュメントの推奨値
      Matcher:  #ヘルスチェックでターゲットから期待されるHTTPコード
        HttpCode: 200
      TargetGroupAttributes: #ロードバランシングなどの詳細設定
        - Key:  deregistration_delay.timeout_seconds  #コネクションが強制切断される際の切断までの待機時間
          Value:  60
        - Key:  target_group_health.dns_failover.minimum_healthy_targets.count  #健康である必要があるターゲットの最小数。下回るとDNSがゾーンを不健全と判断して通信しなくなる
          Value:  1
      TargetType: instance  #ターゲットのタイプを指定
      Targets:
        - Id: !Ref  EC2Instance
          Port:
            Fn::ImportValue: #ImportValueでエクスポートしたSecurityGroupを参照（ImportValueは!Subを併用する場合、短縮形は使用できない）
              !Sub ${SgStackName}-RailsPort  #SecurityGroup.ymlで指定したRails用のポート番号を読み込み
      Tags:
        - Key: Name
          Value:  !Sub ${EnvironmentName}-ALBTg

  InternetALB:  #ALB本体の作成
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-ALB
      Scheme: internet-facing #ALBがインターネットに面するように設定。これによってインターネット上からのリクエストをルーティングする
      Type: application #ロードバランサの種類を指定
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled  #削除保護が有効かどうかの設定
          Value: false
        - Key: idle_timeout.timeout_seconds #アイドルタイムアウト値の設定
          Value: 60
        - Key: routing.http.desync_mitigation_mode  #ALBがアプリケーションにセキュリティリスクを与える可能性のあるリクエストに対しての動作
          Value:  defensive
      SecurityGroups:   #ALB自体のセキュリティグループを指定
        - Fn::ImportValue: #ImportValueでエクスポートしたSecurityGroupを参照（ImportValueは!Subを併用する場合、短縮形は使用できない）
            !Sub ${SgStackName}-ALBSg  #SGの指定。
      Subnets:
        - Fn::ImportValue: #ImportValueでエクスポートしたVPCを参照（ImportValueは!Subを併用する場合、短縮形は使用できない）
            !Sub ${VpcStackName}-PublicSubnet1  #サブネットの指定
        - Fn::ImportValue: #ImportValueでエクスポートしたVPCを参照（ImportValueは!Subを併用する場合、短縮形は使用できない）
            !Sub ${VpcStackName}-PublicSubnet2  #サブネットの指定
      Tags:
        - Key: Name
          Value:  !Sub ${EnvironmentName}-ALB

  ALBListener:  #ALBのリスナー設定
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ALBTargetGroup #転送先のターゲットグループの指定
          Type: forward
      LoadBalancerArn:  !Ref InternetALB  #リスナー設定をアタッチするALBを指定
      Protocol: HTTP
      Port: #リスナーが動作するポート番号を指定
        Fn::ImportValue: #ImportValueでエクスポートしたSecurityGroupを参照（ImportValueは!Subを併用する場合、短縮形は使用できない）
          !Sub ${SgStackName}-WebPort  #SecurityGroup.ymlで指定したHTTP用のポート番号を読み込み

  ALBListener2:  #ALBのリスナー設定
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ALBTargetGroup #転送先のターゲットグループの指定
          Type: forward
      LoadBalancerArn:  !Ref InternetALB  #リスナー設定をアタッチするALBを指定
      Protocol: HTTP
      Port: #リスナーが動作するポート番号を指定
        Fn::ImportValue: #ImportValueでエクスポートしたSecurityGroupを参照（ImportValueは!Subを併用する場合、短縮形は使用できない）
          !Sub ${SgStackName}-RailsPort  #SecurityGroup.ymlで指定したRails用のポート番号を読み込み

  ############################################
  #         S3 Bucket
  ############################################
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${S3Name}-bucket #S3バケット名
      AccessControl:  Private #ACLでの制御は非推奨のため無効にする
      PublicAccessBlockConfiguration: #バケットのパブリックアクセス設定、推奨はすべてブロック
        BlockPublicAcls:  true
        BlockPublicPolicy:  True
        IgnorePublicAcls: True
        RestrictPublicBuckets:  True
      VersioningConfiguration:
        Status: !Ref VersioningConfig
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value:  !Sub ${EnvironmentName}-Bucket
