
AWSTemplateFormatVersion: 2010-09-09
Description: VPC Subnet FlowLog create

############################################
#         Metadata & Parameter
############################################
Metadata: #入力パラメータのグループ化と順序の指定
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Can be created as a separate resource by renaming the environment
        Parameters:
          - EnvironmentName

      -
        Label:
          default: Required Parameters
        Parameters:
          - VpcCIDR
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
          - IntervalTime

Parameters:
  #環境名(変更することで別の環境にすることができる)
  EnvironmentName:
    Type: String
    Default: CFn-raisetech
    Description:  Write Environment Name

  #VPCのIPアドレス
  VpcCIDR:
    Type: String
    Default: 172.16.0.0/16
    Description:  Select CIDR range of VPC

  #PublicSubnetのIPアドレス
  PublicSubnet1CIDR:
    Type: String
    Default: 172.16.10.0/20
    Description:  Select CIDR range of PublicSubnet1

  PublicSubnet2CIDR:
    Type: String
    Default: 172.16.50.0/20
    Description:  Select CIDR range of PublicSubnet2

  #PrivateSubnetのIPアドレス
  PrivateSubnet1CIDR:
    Type: String
    Default: 172.16.100.0/20
    Description:  Select CIDR range of PrivateSubnet1

  PrivateSubnet2CIDR:
    Type: String
    Default: 172.16.150.0/20
    Description:  Select CIDR range of PrivateSubnet2

  #フローログレコードに集約される最大時間間隔
  IntervalTime:
    Type: String
    Default:  600
    AllowedValues:  #最大時間間隔は60秒か600秒の2択
      - 60
      - 600
    Description:  Select MaxAggregationInterval Time

############################################
#         VPC & Subnet
############################################
Resources:
  CFnVPC: #VPCの作成
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR #VPCのIPアドレスのをVpcCIDRから呼び出している
      EnableDnsHostnames: true  #VPCで起動されたインスタンスがDNSホスト名を取得することを有効化
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC  #VPC名をParametersから呼び出して-VPCを付けている

  PublicSubnet1:  #PublicSubnetの作成
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet1CIDR  #PublicSubnetのIPアドレス指定
      MapPublicIpOnLaunch: true #パブリックIPv4アドレスの自動割り当てをONにする
      VpcId: !Ref CFnVPC  #Subnetを作成するVPCの選択
      AvailabilityZone: !Select #デプロイ先リージョンのすべての AZ をリストして、 0番目の AZ にサブネットを作成
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Publuc Subnet1

  PublicSubnet2:  #PublicSubnetの作成
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet2CIDR  #PublicSubnetのIPアドレス指定
      MapPublicIpOnLaunch: true #パブリックIPv4アドレスの自動割り当てをONにする
      VpcId: !Ref CFnVPC  #Subnetを作成するVPCの選択
      AvailabilityZone: !Select #デプロイ先リージョンのすべての AZ をリストして、 1番目の AZ にサブネットを作成
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Publuc Subnet2

  PrivateSubnet1: #PrivateSubnetの作成
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet1CIDR  #PrivateSubnetのIPアドレス指定
      MapPublicIpOnLaunch: false #パブリックIPv4アドレスの自動割り当てをOFFにする
      VpcId: !Ref CFnVPC  #Subnetを作成するVPCの選択
      AvailabilityZone: !Select #デプロイ先リージョンのすべての AZ をリストして、 0番目の AZ にサブネットを作成
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private Subnet1

  PrivateSubnet2: #PrivateSubnetの作成
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnet2CIDR  #PrivateSubnetのIPアドレス指定
      MapPublicIpOnLaunch: false #パブリックIPv4アドレスの自動割り当てをOFFにする
      VpcId: !Ref CFnVPC  #Subnetを作成するVPCの選択
      AvailabilityZone: !Select #デプロイ先リージョンのすべての AZ をリストして、 1番目の AZ にサブネットを作成
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Private Subnet2

  MyInternetGateway:  #InternetGateway作成
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:  !Sub  ${EnvironmentName}-IGW

  MyInternetGatewayAttachment:  #VPCにInternetGatewayを接続する。
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyInternetGateway #!Ref関数で作成したIGWを指定
      VpcId:  !Ref CFnVPC #!Ref関数で作成したVPCを指定

  PublicRouteTable: #PublicSubnetに接続するルートテーブル自体の作成
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  !Ref CFnVPC #!Ref関数でルートテーブルを作成するVPCを指定
      Tags:
        - Key: Name
          Value:  !Sub  ${EnvironmentName}-rtb-Public

  PublicRoute:  #PublicSubnet用のカスタムルートテーブル内のルートの設定
    Type: AWS::EC2::Route
    DependsOn:  MyInternetGatewayAttachment #MyInternetGatewayAttachmentの次にPublicRouteを作成するよう、明示的に依存関係を指定。
    Properties:
      RouteTableId: !Ref PublicRouteTable #アタッチ先のRouteTableの指定
      DestinationCidrBlock: 0.0.0.0/0 #宛先の一致に使用するIPv4CIDRブロックを指定、宛先がInternetのため0.0.0.0/0を指定
      GatewayId: !Ref MyInternetGateway #VPCにアタッチされているInternetGatewayを指定

  PublicSubnet1RouteTableAssociation: #サブネットをルートテーブルに紐づけする
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable #紐づけたいルートテーブルを指定
      SubnetId: !Ref PublicSubnet1  #紐づけたいサブネットの指定、今回はPublicSubnet1を指定

  PublicSubnet2RouteTableAssociation: #サブネットをルートテーブルに紐づけする
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable #紐づけたいルートテーブルを指定
      SubnetId: !Ref PublicSubnet2  #紐づけたいサブネットの指定、今回はPublicSubnet2を指定

  ############################################
  #         Flow Log
  ############################################
  FlowLogPolicy:  #CloudwatchにFlow-Logsを保存する際に使用するロールにアタッチするポリシーの作成
    Type: AWS::IAM::ManagedPolicy #ただのPolicyだとインラインポリシーになるので、カスタマー管理ポリシーとして作成
    Properties:
      ManagedPolicyName: !Sub  ${EnvironmentName}-FlowLog-Policy #リージョンで一意のポリシー名
      PolicyDocument:
        Version:  2012-10-17
        Statement:
          - Effect: Allow
            Action: #ロググループの基本操作の許可
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
            Resource: "*"

  VPCFlowLogIamRole:   #CloudwatchにFlow-Logsを保存する際に使用するロールの作成
    Type :  AWS::IAM::Role
    DependsOn: FlowLogPolicy
    Properties:
      RoleName: !Sub  ${EnvironmentName}-FlowLog-Role #ロール名
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:  #サービスにFlow-logを指定
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:  #作成したポリシーをアタッチ
        - !Sub  arn:aws:iam::${AWS::AccountId}:policy/${EnvironmentName}-FlowLog-Policy


  CFnVPCFlowLogGroup: #ロググループの作成
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete  #スタックを削除する際のリソースの対処。今回はスタック削除時にリソースも削除する。
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-LogGroup #ロググループ名の指定
      RetentionInDays:  14  #ロググループにログを保持する期間
      Tags:
        - Key: Name
          Value:  !Sub  ${EnvironmentName}-LogGroup

  CFnVPCFlowLog:  #VPCFlowLogの作成
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt VPCFlowLogIamRole.Arn  #フローログをログの宛先に発行できるようにするIAMロールのARN
      LogDestinationType: cloud-watch-logs  #ログの宛先（保存先）
      LogGroupName:  !Ref CFnVPCFlowLogGroup #Cloud Watch Logsのロググループ名
      MaxAggregationInterval: !Ref IntervalTime #ログレコードに集約される最大時間間隔は60秒か600秒の2択
      ResourceId: !Ref CFnVPC  #監視するリソースID、今回はVPCを指定
      ResourceType: VPC #監視するリソースのタイプ、今回はVPCを指定
      TrafficType:  ALL #監視するトラフィックのタイプ、今回はACCEPTもREJECTも監視するALLを指定
      Tags:
        - Key: Name
          Value:  !Sub  ${EnvironmentName}-VPC-FlowLog

############################################
#         Outputs
############################################
Outputs:  #クロススタック用のエクスポートを宣言
  StackVPC: #VPC用のエクスポート
    Description:  Stack VPC is ID
    Value: !Ref  CFnVPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC  #エクスポート名を記述。名前の重複を避けるため、StackNameでスタックファイル名が付くように記述。

  StackPublicSubnet1: #PublicSubnet1用のエクスポート
    Description:  Stack PublicSubnet1 is ID
    Value: !Ref  PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1  #エクスポート名を記述。名前の重複を避けるため、StackNameでスタックファイル名が付くように記述。

  StackPublicSubnet2: #PublicSubnet2用のエクスポート
    Description:  Stack PublicSubnet2 is Stack
    Value: !Ref  PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2  #エクスポート名を記述。名前の重複を避けるため、StackNameでスタックファイル名が付くように記述。

  StackPrivateSubnet1: #PrivateSubnet1用のエクスポート
    Description:  Stack PrivateSubnet1 is Stack
    Value: !Ref  PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1  #エクスポート名を記述。名前の重複を避けるため、StackNameでスタックファイル名が付くように記述。

  StackPrivateSubnet2: #PrivateSubnet2用のエクスポート
    Description:  Stack PrivateSubnet2 is Stack
    Value: !Ref  PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2  #エクスポート名を記述。名前の重複を避けるため、StackNameでスタックファイル名が付くように記述。
